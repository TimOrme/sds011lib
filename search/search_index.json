{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>sds011lib</code> is a fully-typed, nearly-complete, python 3.8+ library for interacting with the SDS011 Air Quality Sensor.</p> <p>The SDS011 is a small, low-cost sensor created by www.inovafitness.com, used to measure particulate matter in the air.  It  can measure both PM 2.5 and PM10 values simultaneously, and connects to devices over a serial port, or via USB with an included adaptor.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>sds011lib</code> requires Python3.8+.</p> <pre><code>pip install sds011lib\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>from sds011lib import SDS011QueryReader\n\n# Setup a query-mode reader on /dev/ttyUSB0 \nsensor = SDS011QueryReader('/dev/ttyUSB0')\n\n# Read some data!\naqi = sensor.query()\nprint(aqi.pm25)\nprint(aqi.pm10)\n\n# Put the device to sleep\nsensor.sleep()\n\n# Wake it back up\nsensor.wake()\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#reading-from-the-device","title":"Reading From The Device","text":"<pre><code>from sds011lib import SDS011QueryReader\n\n# Create a query mode reader.\nreader = SDS011QueryReader('/dev/ttyUSB0')\n\n# Query the device\nresult = reader.query()\n\n# Print out the PM values\nprint(f\"PM 2.5: {result.pm25}\")\nprint(f\"PM 10: {result.pm10}\")\n</code></pre>"},{"location":"#sleepingwaking-the-device","title":"Sleeping/Waking The Device","text":"<pre><code>from sds011lib import SDS011QueryReader\n\n# Create a query mode reader.\nreader = SDS011QueryReader('/dev/ttyUSB0')\n\n# Put the device to sleep.\nreader.sleep()\n\n# Do something....\n\n# Wake the device back up\nreader.wake()\n\n# You can also check the device sleep state\nresult = reader.get_sleep_state()\nprint(result.state)\n</code></pre>"},{"location":"#set-the-working-period","title":"Set The Working Period","text":"<pre><code>from sds011lib import SDS011QueryReader\n\n# Create a query mode reader.\nreader = SDS011QueryReader('/dev/ttyUSB0')\n\n# Set the working period to every 2 minutes\nreader.set_working_period(2)\n\n# Query for some data\ndata = reader.query()\n\n# Check the current working period\nresult = reader.get_working_period()\nprint(result.interval)\n\n# Set the device to work continuously\nreader.set_working_period(0)\n</code></pre>"},{"location":"#set-the-device-id","title":"Set The Device ID","text":"<pre><code>from sds011lib import SDS011QueryReader\n\n# Create a query mode reader.\nreader = SDS011QueryReader('/dev/ttyUSB0')\n\n# Set the ID\nreader.set_device_id(b\"\\xC1\\x4B\")\n\n# Query again\nresult = reader.query()\n\n# See that the device ID is set\nprint(result.device_id)\n</code></pre>"},{"location":"api_ref/","title":"API Reference","text":""},{"location":"api_ref/#readers","title":"Readers","text":"<p>SDS011 Reader module.</p> <p>Contains multiple implementations of readers, for different use cases.</p> <ul> <li>SDS011QueryReader - (Recommended) A reader which operates exclusively in query mode.</li> <li>SDS011ActiveReader - A reader which operates exclusively in active mode</li> <li>SS011Reader - A lower-level reader, which isn't opinionated about the mode.</li> </ul> <p>Attributes:</p> Name Type Description <code>ALL_SENSORS</code> <code>bytes</code> <p>A special device ID which targets all sensors attached to a serial port.</p>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader","title":"<code>SDS011ActiveReader</code>","text":"<p>Active Mode Reader.</p> <p>Note that because active mode readers will constantly return data, this implementation opens and closes the serial port for each command.</p>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.__init__","title":"<code>__init__(ser_dev: Union[str, SerialLike], send_command_sleep: int = 2)</code>","text":"<p>Create a reader which operates exclusively in active mode.</p> <p>Parameters:</p> Name Type Description Default <code>ser_dev</code> <code>Union[str, SerialLike]</code> <p>A path to a serial device, or an instance of serial.Serial.</p> required <code>send_command_sleep</code> <code>int</code> <p>The number of seconds to sleep after sending a command to the device.</p> <code>2</code>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.query","title":"<code>query() -&gt; QueryResponse</code>","text":"<p>Query the device for pollutant data.</p> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>The latest pollutant data.</p>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.set_device_id","title":"<code>set_device_id(device_id: bytes, target_device_id: bytes = ALL_SENSORS) -&gt; DeviceIdResponse</code>","text":"<p>Set the device ID.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The new, 4-byte device ID to set.</p> required <code>target_device_id</code> <code>bytes</code> <p>The target device ID.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>DeviceIdResponse</code> <p>A response with the new device ID.</p>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.set_working_period","title":"<code>set_working_period(working_period: int, device_id: bytes = ALL_SENSORS) -&gt; WorkingPeriodReadResponse</code>","text":"<p>Set the working period for the device.</p> <p>Working period must be between 0 and 30.</p> <p>0 means the device will read continuously. Any value 1-30 means the device will wake and read for 30 seconds every n*60-30 seconds.</p> <p>Parameters:</p> Name Type Description Default <code>working_period</code> <code>int</code> <p>A value 0-30 to set as the new working period</p> required <code>device_id</code> <code>bytes</code> <p>The device ID to set the working period for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>WorkingPeriodReadResponse</code> <p>A response with the new working period</p>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.sleep","title":"<code>sleep(device_id: bytes = ALL_SENSORS) -&gt; SleepWakeReadResponse</code>","text":"<p>Put the device to sleep, turning off fan and diode.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to put to sleep.</p> <code>ALL_SENSORS</code>"},{"location":"api_ref/#sds011lib.SDS011ActiveReader.wake","title":"<code>wake(device_id: bytes = ALL_SENSORS) -&gt; SleepWakeReadResponse</code>","text":"<p>Wake the device up to start reading, turning on the fan and diode.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to wake up.</p> <code>ALL_SENSORS</code>"},{"location":"api_ref/#sds011lib.SDS011QueryReader","title":"<code>SDS011QueryReader</code>","text":"<p>Reader working in query mode.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.__init__","title":"<code>__init__(ser_dev: Union[str, SerialLike], send_command_sleep: int = 1)</code>","text":"<p>Create a reader which operates exclusively in query mode.</p> <p>Parameters:</p> Name Type Description Default <code>ser_dev</code> <code>Union[str, SerialLike]</code> <p>A path to a serial device, or an instance of serial.Serial.</p> required <code>send_command_sleep</code> <code>int</code> <p>The number of seconds to sleep after sending a command to the device.</p> <code>1</code>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.get_firmware_version","title":"<code>get_firmware_version(device_id: bytes = ALL_SENSORS) -&gt; CheckFirmwareResponse</code>","text":"<p>Retrieve the firmware version from the device.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to retrieve firmware version for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>CheckFirmwareResponse</code> <p>The firmware version of the device</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.get_reporting_mode","title":"<code>get_reporting_mode(device_id: bytes = ALL_SENSORS) -&gt; ReportingModeResponse</code>","text":"<p>Get the current reporting mode of the device.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to get the reporting mode for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>ReportingModeResponse</code> <p>The current reporting mode of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.get_sleep_state","title":"<code>get_sleep_state(device_id: bytes = ALL_SENSORS) -&gt; SleepWakeReadResponse</code>","text":"<p>Get the current sleep state.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to get the sleep state for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>SleepWakeReadResponse</code> <p>The current sleep state of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.get_working_period","title":"<code>get_working_period(device_id: bytes = ALL_SENSORS) -&gt; WorkingPeriodReadResponse</code>","text":"<p>Retrieve the current working period for the device.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to get the working period for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>WorkingPeriodReadResponse</code> <p>A response with the current working period.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.query","title":"<code>query(device_id: bytes = ALL_SENSORS) -&gt; QueryResponse</code>","text":"<p>Query the device for pollutant data.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to get pollutant data for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>The latest pollutant data.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.set_device_id","title":"<code>set_device_id(device_id: bytes, target_device_id: bytes = ALL_SENSORS) -&gt; DeviceIdResponse</code>","text":"<p>Set the device ID.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The new, 4-byte device ID to set.</p> required <code>target_device_id</code> <code>bytes</code> <p>The target device ID.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>DeviceIdResponse</code> <p>A response with the new device ID.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.set_working_period","title":"<code>set_working_period(working_period: int, device_id: bytes = ALL_SENSORS) -&gt; WorkingPeriodReadResponse</code>","text":"<p>Set the working period for the device.</p> <p>Working period must be between 0 and 30.</p> <p>0 means the device will read continuously. Any value 1-30 means the device will wake and read for 30 seconds every n*60-30 seconds.</p> <p>Parameters:</p> Name Type Description Default <code>working_period</code> <code>int</code> <p>A value 0-30 to set as the new working period</p> required <code>device_id</code> <code>bytes</code> <p>The device ID to set the working period for.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>WorkingPeriodReadResponse</code> <p>A response with the new working period</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.sleep","title":"<code>sleep(device_id: bytes = ALL_SENSORS) -&gt; SleepWakeReadResponse</code>","text":"<p>Put the device to sleep, turning off fan and diode.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to put to sleep.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>SleepWakeReadResponse</code> <p>The new sleep state of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011QueryReader.wake","title":"<code>wake(device_id: bytes = ALL_SENSORS) -&gt; SleepWakeReadResponse</code>","text":"<p>Wake the device up to start reading, turning on the fan and diode.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The device ID to wake up.</p> <code>ALL_SENSORS</code> <p>Returns:</p> Type Description <code>SleepWakeReadResponse</code> <p>The new sleep state of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader","title":"<code>SDS011Reader</code>","text":"<p>NOVA PM SDS011 Reader.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.__init__","title":"<code>__init__(ser_dev: Union[str, SerialLike], send_command_sleep: int = 1, max_loop_count: int = 30)</code>","text":"<p>Create a basic device.</p> <p>This is mostly a low level implementation. For practical purposes, most users will want to use the SDS011QueryReader or SDS011ActiveReader.  This implementation would only be useful for very special cases, and serves as the base class for the other reader implementations anyways.</p> <p>Parameters:</p> Name Type Description Default <code>ser_dev</code> <code>Union[str, SerialLike]</code> <p>A path to a serial device, or an instance of serial.Serial.</p> required <code>send_command_sleep</code> <code>int</code> <p>The number of seconds to sleep after sending a command to the device.</p> <code>1</code> <code>max_loop_count</code> <code>int</code> <p>The maximum number of reads to search through to find a desired response command.</p> <code>30</code>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_data","title":"<code>query_data() -&gt; QueryResponse</code>","text":"<p>Query the device for pollutant data.</p> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>Pollutant data from the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_device_id","title":"<code>query_device_id() -&gt; DeviceIdResponse</code>","text":"<p>Retrieve the current device ID.</p> <p>Returns:</p> Type Description <code>DeviceIdResponse</code> <p>The current device ID.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_firmware_version","title":"<code>query_firmware_version() -&gt; CheckFirmwareResponse</code>","text":"<p>Retrieve the firmware version from the device.</p> <p>Returns:</p> Type Description <code>CheckFirmwareResponse</code> <p>The firmware version from the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_reporting_mode","title":"<code>query_reporting_mode() -&gt; ReportingModeResponse</code>","text":"<p>Get the current reporting mode of the device.</p> <p>Returns:</p> Type Description <code>ReportingModeResponse</code> <p>The current reporting mode of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_sleep_state","title":"<code>query_sleep_state() -&gt; SleepWakeReadResponse</code>","text":"<p>Get the current sleep state.</p> <p>Returns:</p> Type Description <code>SleepWakeReadResponse</code> <p>The current sleep state of the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.query_working_period","title":"<code>query_working_period() -&gt; WorkingPeriodReadResponse</code>","text":"<p>Retrieve the current working period for the device.</p> <p>Returns:</p> Type Description <code>WorkingPeriodReadResponse</code> <p>The current working period set for the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.request_data","title":"<code>request_data(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Submit a request to the device to return pollutant data.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.request_firmware_version","title":"<code>request_firmware_version(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Submit a request to retrieve the firmware version from the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.request_reporting_mode","title":"<code>request_reporting_mode(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Submit a request to the device to return the current reporting mode.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.request_sleep_state","title":"<code>request_sleep_state(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Submit a request to get the current sleep state.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.request_working_period","title":"<code>request_working_period(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Submit a request to retrieve the current working period for the device.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.safe_wake","title":"<code>safe_wake(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Wake the device up, if you don't know what mode its in.</p> <p>This operates as a fire-and-forget, even in query mode.  You shouldn't have to (and can't) query for a response after this command.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.set_active_mode","title":"<code>set_active_mode() -&gt; None</code>","text":"<p>Set the reporting mode to active.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.set_device_id","title":"<code>set_device_id(device_id: bytes, target_device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Set the device ID.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>bytes</code> <p>The new device ID to set.</p> required <code>target_device_id</code> <code>bytes</code> <p>The target device ID to set the new device ID on.</p> <code>ALL_SENSORS</code>"},{"location":"api_ref/#sds011lib.SDS011Reader.set_query_mode","title":"<code>set_query_mode() -&gt; None</code>","text":"<p>Set the reporting mode to querying.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.set_sleep_state","title":"<code>set_sleep_state(sleep_state: SleepState, device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Set the sleep state, either wake or sleep.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_state</code> <code>SleepState</code> <p>The sleep state to set, either SleepState.WAKE or SleepState.SLEEP</p> required <code>device_id</code> <code>bytes</code> <p>The device ID to sleep or wake.</p> <code>ALL_SENSORS</code>"},{"location":"api_ref/#sds011lib.SDS011Reader.set_working_period","title":"<code>set_working_period(working_period: int, device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Set the working period for the device.</p> <p>Working period must be between 0 and 30.</p> <p>0 means the device will read continuously. Any value 1-30 means the device will wake and read for 30 seconds every n*60-30 seconds.</p> <p>Parameters:</p> Name Type Description Default <code>working_period</code> <code>int</code> <p>A value 0-30 to set as the new working period</p> required <code>device_id</code> <code>bytes</code> <p>The device ID to set the working period for.</p> <code>ALL_SENSORS</code>"},{"location":"api_ref/#sds011lib.SDS011Reader.sleep","title":"<code>sleep(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Put the device to sleep, turning off fan and diode.</p>"},{"location":"api_ref/#sds011lib.SDS011Reader.wake","title":"<code>wake(device_id: bytes = ALL_SENSORS) -&gt; None</code>","text":"<p>Wake the device up to start reading, turning on fan and diode.</p>"},{"location":"api_ref/#sds011lib.SerialLike","title":"<code>SerialLike</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>A serial-like device.</p>"},{"location":"api_ref/#sds011lib.SerialLike.close","title":"<code>close() -&gt; None</code>","text":"<p>Close a connection to the device.</p>"},{"location":"api_ref/#sds011lib.SerialLike.open","title":"<code>open() -&gt; None</code>","text":"<p>Open a connection to the device.</p>"},{"location":"api_ref/#sds011lib.SerialLike.read","title":"<code>read(size: int) -&gt; bytes</code>","text":"<p>Read data from the device.</p>"},{"location":"api_ref/#sds011lib.SerialLike.write","title":"<code>write(data: bytes) -&gt; Optional[int]</code>","text":"<p>Write data from the device.</p>"},{"location":"api_ref/#responses","title":"Responses","text":""},{"location":"api_ref/#sds011lib.responses","title":"<code>sds011lib.responses</code>","text":"<p>Response objects for SDS011.</p> <p>Creates and validates typed classes from binary responses from the device.</p>"},{"location":"api_ref/#sds011lib.responses.CheckFirmwareResponse","title":"<code>CheckFirmwareResponse</code>  <code>dataclass</code>","text":"<p>Response containing the firmware version.</p> <p>Attributes:</p> Name Type Description <code>year</code> <code>int</code> <p>The two-digit year of the firmware release.</p> <code>month</code> <code>int</code> <p>The month of the firmware release.</p> <code>day</code> <code>int</code> <p>The day of the firmware release.</p>"},{"location":"api_ref/#sds011lib.responses.DeviceIdResponse","title":"<code>DeviceIdResponse</code>  <code>dataclass</code>","text":"<p>Device ID response.</p> <p>Attributes:</p> Name Type Description <code>device_id</code> <code>bytes</code> <p>The 4 byte device ID.</p>"},{"location":"api_ref/#sds011lib.responses.QueryResponse","title":"<code>QueryResponse</code>  <code>dataclass</code>","text":"<p>A query read response.</p> <p>Attributes:</p> Name Type Description <code>pm25</code> <code>float</code> <p>The PM2.5 reading from the device</p> <code>pm10</code> <code>float</code> <p>The PM10 reading from the device.</p>"},{"location":"api_ref/#sds011lib.responses.ReportingModeResponse","title":"<code>ReportingModeResponse</code>  <code>dataclass</code>","text":"<p>Reporting mode response.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>OperationType</code> <p>The operation type the response is for, either QUERY or SET_MODE.</p> <code>state</code> <code>ReportingMode</code> <p>The current reporting mode, either ACTIVE or QUERYING</p>"},{"location":"api_ref/#sds011lib.responses.SleepWakeReadResponse","title":"<code>SleepWakeReadResponse</code>  <code>dataclass</code>","text":"<p>Sleep/Wake Response.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>OperationType</code> <p>The operation type the response is for, either QUERY or SET_MODE.</p> <code>state</code> <code>SleepState</code> <p>The current sleep state, either WAKE or SLEEP.</p>"},{"location":"api_ref/#sds011lib.responses.WorkingPeriodReadResponse","title":"<code>WorkingPeriodReadResponse</code>  <code>dataclass</code>","text":"<p>Working period response.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>OperationType</code> <p>The operation type the response is for, either QUERY or SET_MODE.</p> <code>interval</code> <code>int</code> <p>The working period interval, 0-30.  0 Indicates continuous reading.</p>"},{"location":"api_ref/#exceptions","title":"Exceptions","text":""},{"location":"api_ref/#sds011lib.exceptions","title":"<code>sds011lib.exceptions</code>","text":"<p>All exception classes for the SDS011.</p>"},{"location":"api_ref/#sds011lib.exceptions.ChecksumFailedException","title":"<code>ChecksumFailedException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the checksum value in a response is incorrect.</p> <p>This indicates some corruption of the response.</p> <p>Attributes:</p> Name Type Description <code>expected</code> <code>int</code> <p>The expected checksum</p> <code>actual</code> <code>int</code> <p>The actual checksum</p>"},{"location":"api_ref/#sds011lib.exceptions.IncompleteReadException","title":"<code>IncompleteReadException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the device didn't return complete data when asking for a response.</p> <p>Responses must be 10 bytes total.  If the device doesn't respond with a complete 10 bytes, it can mean that either 1) The device is in sleep mode or 2) The device is in query mode, and nothing was requested.</p>"},{"location":"api_ref/#sds011lib.exceptions.IncorrectCommandCodeException","title":"<code>IncorrectCommandCodeException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the command code in a response is incorrect.</p> <p>Attributes:</p> Name Type Description <code>expected</code> <code>bytes</code> <p>The expected command code as bytes</p> <code>actual</code> <code>bytes</code> <p>The actual command code as bytes.</p>"},{"location":"api_ref/#sds011lib.exceptions.IncorrectCommandException","title":"<code>IncorrectCommandException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the command ID in a response is incorrect.</p> <p>Attributes:</p> Name Type Description <code>expected</code> <code>bytes</code> <p>The expected command id as bytes</p> <code>actual</code> <code>bytes</code> <p>The actual command id as bytes.</p>"},{"location":"api_ref/#sds011lib.exceptions.IncorrectWrapperException","title":"<code>IncorrectWrapperException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the wrapper of a response (either HEAD or TAIL) is incorrect.</p> <p>This indicates some corruption of the response.</p>"},{"location":"api_ref/#sds011lib.exceptions.InvalidDeviceIdException","title":"<code>InvalidDeviceIdException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if the trying to set the device ID on an invalid device.</p> <p>This occurs if you try and send to a device ID that doesn't exist.</p>"},{"location":"api_ref/#sds011lib.exceptions.MissingResponseException","title":"<code>MissingResponseException</code>","text":"<p>         Bases: <code>Sds011Exception</code></p> <p>Thrown if we are trying to find a response from the device, but it doesn't return in the max iterations.</p> <p>This can occur if the device just never responds to a command thats sent.</p>"},{"location":"api_ref/#sds011lib.exceptions.Sds011Exception","title":"<code>Sds011Exception</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base exception for SDS011 device.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#toolset","title":"Toolset","text":"<p>To start developing, you'll need to install the following tools:</p> <ul> <li>Python 3.9+ - For API Code</li> <li>poetry - For python package management</li> <li>justfile - For builds</li> </ul> <p>Optionally, we have pre-commit hooks available as well.  To install hooks, just run <code>pre-commit install</code> and then linters and autoformatting will be applied automatically on commit.</p>"},{"location":"contributing/#quickstart","title":"Quickstart","text":"<p>To build the project, and install all dev-dependencies, run:</p> <pre><code>just build\n</code></pre> <p>To run tests for the project, run:</p> <pre><code>just test\n</code></pre> <p>To manually run lint checks on the code, run:</p> <pre><code>just lint\n</code></pre> <p>To run auto-formatters, run:</p> <pre><code>just format\n</code></pre>"},{"location":"contributing/#testing-against-the-emulator","title":"Testing Against The Emulator","text":"<p>In the testing folder, tests run against an emulated serial device that mostly should behave like an SDS011 device.  This can be extremely helpful for running unit tests without an actual device (such as in our automated builds.)  This  is the default behavior, and you can find this in the test setups like so:</p> <pre><code>import pytests\nfrom typing import Generator\nfrom tests.serial_emulator import Sds011SerialEmulator\nfrom sds011lib import SDS011Reader\n\nclass TestBaseReader:\n    @pytest.fixture\n    def reader(self) -&gt; Generator[SDS011Reader, None, None]:\n        # Set up the reader to use the serial emulator\n        ser_dev = Sds011SerialEmulator()\n        reader = SDS011Reader(ser_dev=ser_dev, send_command_sleep=0)\n        yield reader\n</code></pre>"},{"location":"contributing/#testing-against-a-real-device","title":"Testing Against A Real Device","text":"<p>It can also be helpful to run tests integrated against an actual device.  Fortunately, switching to do that is simple.  Just replace the emulator with an actual Serial object instead:</p> <pre><code>import pytests\nimport serial\nfrom typing import Generator\nfrom sds011lib import SDS011Reader\n\nclass TestBaseReader:\n    @pytest.fixture\n    def reader(self) -&gt; Generator[SDS011Reader, None, None]:\n        # Set up the reader to use a device attached on /dev/ttyUSB0\n        ser_dev = serial.Serial('/dev/ttyUSB0', timeout=2, baudrate=9600)\n        reader = SDS011Reader(ser_dev=ser_dev, send_command_sleep=0)\n        yield reader\n</code></pre>"},{"location":"contributing/#submitting-a-pr","title":"Submitting a PR","text":"<p>The main branch is locked, but you can open a PR on the repo.  Build checks must pass, and changes approved by a code owner, before merging.</p>"},{"location":"resource/","title":"Resources","text":""},{"location":"resource/#control-protocol","title":"Control Protocol","text":"<p>The most informative resource I've found is the Control Protocol which outlines a presumably complete set of various commands you can send to the SDS011.  It provides information on  which byte-level data must be sent, and what will be returned.</p>"},{"location":"resource/#datasheet","title":"Datasheet","text":"<p>The SDS011 Data Sheet provides some good  high-level information about how to interact with the device, but only includes protocol details about how to read from  the device.  It also includes lots of hardware information about the device.</p>"},{"location":"resource/#epa-aqi","title":"EPA AQI","text":"<p>Technical Spec for Reporting the EPA AQI</p>"},{"location":"resource/#other-implementations","title":"Other Implementations","text":"<p>There are several other tools and libraries available for the SDS011.</p> <ul> <li>sds011 - Python library for interacting with the device, including a database storage option, and a socket server.</li> <li>simple-sds011 - A minimal library for reading samples from a SDS011.</li> <li>py-sds011 - Python 3 interface to the SDS011</li> <li>pysds011 - Python library and command line tool for interacting with the SDS011.</li> <li>monitor-air-quality - A command line tool for interacting with the  SDS011.</li> </ul>"},{"location":"understanding/","title":"Understanding the SDS011","text":"<p>Caveat Emptor</p> <p>Much of this understanding comes from reverse-engineering the device.  There are some cases where the SDS011 behaves in \"unexpected\" ways, but these might just be my misunderstanding of it's intended usage.  Without more official documentation, it's hard to know if the explanations outlined here are actually correct. </p> <p>The SDS011 is a small, low-cost sensor created by www.inovafitness.com, used to measure particulate matter in the air.  It  can measure both PM 2.5 and PM10 values simultaneously, and connects to devices over a serial port, or via USB with an included adaptor.</p> <p>Because of its size and cost, it is often used on DIY projects with the Raspberry Pi,  or Arduino boards, though it can be used on many other devices as well. </p>"},{"location":"understanding/#features","title":"Features","text":""},{"location":"understanding/#pollutants","title":"Pollutants","text":"<p>The SDS011 measures both small PM2.5 particles, and larger  PM10 particles, with a range of 0.0-999.9 \u03bcg / m3.</p> <p>These pollutants can be used in part to calculate the EPA AQI.</p>"},{"location":"understanding/#reporting-modes","title":"Reporting Modes","text":"<p>The SDS011 can report in both <code>ACTIVE</code> and <code>QUERYING</code> mode, with <code>ACTIVE</code> being the factory default.</p> <p>In <code>ACTIVE</code> mode, the device will always respond with pollutant data, regardless of what other commands are sent to it. It constantly responds with this data, though there are caveats to this functionality.</p> <p>In <code>QUERYING</code> mode, the device operates in a request/response model, where a request is written to the device, and then  it writes a response to it's output.  In this mode, pollutant data must specifically be asked for. </p>"},{"location":"understanding/#working-period","title":"Working Period","text":"<p>You can set the SDS011 to work continuously, reading all the time, or you can set it to turn on periodically and read  for 30 seconds.  The device allows you to set the period between work between 0 and 30 minutes. As an example, if you  set the working period to 10, the device would wake up every ten minutes, read for 30 seconds, and then turn itself off.</p> <p>Setting the working period to 0 makes the device work continuously.</p>"},{"location":"understanding/#sleepwake","title":"Sleep/Wake","text":"<p>You can also manually turn the device on and off, by setting it to sleep or wake.  This can be helpful if you want to  manually control the device to get reads, or if you need to have a working period longer than 30 minutes.  Note that in sleep mode, the device still draws some power; just the fan and diode are turned off.</p>"},{"location":"understanding/#device-ids","title":"Device IDs","text":"<p>The SDS011 has a 4 byte device ID, which seems to help support cases where you have multiple devices attached to a single  port, though I haven't actually tried to set this up.  Every command that the SDS011 accepts can take a target device ID, or you can send commands to target all devices by passing <code>\\xFF\\xFF</code> as the device ID. </p>"},{"location":"understanding/#suggested-operation","title":"Suggested Operation","text":"<p>The SDS011 ships with two modes of operation: <code>ACTIVE</code> and <code>QUERYING</code>.  <code>QUERYING</code> mode, though not the factory default, seems to be much more predictable in its behavior, is generally easier to use, has a more complete feature-set, and  likely can help extend the lifetime of the device.  As such, I recommend using <code>QUERYING</code> mode.</p> <p>It is also recommended to use either the working period functionality, or to manually put the device to sleep when not in use.  Generally, continuously reading doesn't give meaningful differentiation of reads when  compared to intermittent but frequent reading.</p> <p>Lastly, it's usually good to give the device at least 15 seconds to warm up after waking before taking any read data.  This gives the fan some time to flush out any air in the device, and pull in a more meaningful external air from the  outside.</p>"},{"location":"understanding/#device-lifetime","title":"Device Lifetime","text":"<p>The SDS011 datasheet indicates that it has a lifetime of about 8000 hours, or a little less than a year of constant use. An easy way to extend the life of your device is to turn it on intermittently rather than constantly.  There are two ways to do this, either via setting the working period, or by manually putting the device to  sleep when it's not in use, and waking it when needed.  By reading for even just a few minutes spread  throughout an hour, you can extend the lifetime of the device to multiple years. </p>"},{"location":"understanding/#quirks","title":"Quirks","text":""},{"location":"understanding/#sending-commands-in-active-mode","title":"Sending Commands in Active Mode","text":"<p>When in active mode, you can send commands to the device.  However, because the device is essentially constantly  changing its response buffer to be pollutant data, you can't simply just read the latest data from the device, since the latest data might be pollutant data instead of the response to your command.  The implementation of the  <code>SDS011ActiveReader</code> handles this for you, but it's good to be aware of.</p>"},{"location":"understanding/#serial-connections-in-active-mode","title":"Serial Connections in Active Mode","text":"<p>Because active mode is constantly sending back data over the serial port, it's best to not leave the connection open,  since, unless you're reading from it constantly, the device will continually fill the response buffer with pollutant  data.  Leaving this data there, might make you inadvertently read old data from the response buffer instead of the  latest.  Instead, it's best to open and close the serial connection when executing queries and commands, so that you're guaranteed to have recent data.  Again, the implementation of <code>SDS011ActiveReader</code> manages this for you, but something  to keep in mind.</p>"},{"location":"understanding/#delayed-responses-to-sending-commands","title":"Delayed Responses to Sending Commands","text":"<p>When sending commands to the device, it typically takes about a second for the device to write a response back to the  serial port.  As such, all the readers are configured by default to have a 1 second sleep after a command is sent, so  that the device has time to respond, and you don't receive errors when trying to read results back.</p> <p>You can try and configure this to tune it if you'd like:</p> <pre><code>from sds011lib import SDS011ActiveReader\nimport serial\n# Create a query mode reader, with a 2 second sleep instead \n# of 1 after a command is sent. \nreader = SDS011ActiveReader('/dev/ttyUSB0', send_command_sleep=2)\n</code></pre>"}]}